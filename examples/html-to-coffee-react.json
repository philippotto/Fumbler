{
  "input" : "<section class=\"top-bar-section\">\n<!-- Left Nav Section -->\n<ul class=\"left\">\n  <li class=\"has-form\">\n    <div class=\"row collapse\">\n      <div class=\"large-8 small-9 columns\">\n        <input type=\"text\" placeholder=\"Find Stuff\">\n      </div>\n      <div class=\"large-4 small-3 columns\">\n        <a href=\"#\" class=\"alert button expand\">Search</a>\n      </div>\n    </div>\n  </li>\n</ul>\n\n<!-- Right Nav Section -->\n<ul class=\"right\">\n  <li class=\"active\"><a href=\"#\">Right Button Active</a></li>\n  <li class=\"has-dropdown\">\n    <a href=\"#\">Right Button Dropdown</a>\n    <ul class=\"dropdown\">\n      <li><a href=\"#\">First link in dropdown</a></li>\n    </ul>\n  </li>\n</ul>\n\n</section>",
  "code" : "// Your input is available via the variable \"input\"\n// The last statement of this code will be taken as the output.\n\nvar indentType = \"  \";\nvar curlyBraces = false;\nvar globalDom = true;\n\nvar output = $(jQuery.parseHTML(input));\n\nfunction traverse(node, recursionLevel) {\n    var attributes = [];\n    for (var attr, i=0, attrs = node.get(0).attributes, l=attrs.length; i<l; i++){\n        attr = attrs.item(i);\n        attributes.push({attr : attr.nodeName, value : attr.nodeValue});\n    }\n    \n    var tagName = node.prop(\"tagName\").toLowerCase();\n    if (!globalDom)\n        tagName = \"R.\" + tagName;\n\n    var attrSuffix = attributes.map(function(el) {\n        return el.attr + \" : '\" + el.value + \"'\";\n    }).join(\", \");\n    if (attrSuffix !== \"\") {\n        if (curlyBraces)\n            attrSuffix = \"{\" + attrSuffix + \"}\";\n        attrSuffix = \" \" + attrSuffix;\n    }\n    \n    var indent = Array(recursionLevel).join(indentType);\n    var s = indent + tagName + attrSuffix;\n\n    if (node.children().length > 0) {\n        s += \",\\n\";\n        var m = node.children()\n            .map(function(index, value) { return traverse($(value), recursionLevel + 1) })\n            .get()\n            .join(\"\\n\");\n        s += m;\n    }\n    return s;\n}\n\ntraverse(output, 1);"
}